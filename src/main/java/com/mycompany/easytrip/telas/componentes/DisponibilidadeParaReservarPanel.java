package com.mycompany.easytrip.telas.componentes;

import com.mycompany.easytrip.dominio.entidades.Disponibilidade;
import com.mycompany.easytrip.dominio.enums.StatusDisponibilidade;
import java.time.LocalDate;
import java.time.YearMonth;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class DisponibilidadeParaReservarPanel extends javax.swing.JPanel {
    private final Map<String, Disponibilidade> disponibilidades = new HashMap<>();
    private LocalDate dataEntrada = LocalDate.MIN;
    private LocalDate dataSaida = LocalDate.MIN;
    private int dataEntradaLinha = -1;
    private int dataSaidaLinha = -1;
    private final int COLUNA_DATA = 0;
    private final int COLUNA_ENTRADA = 2;
    private final int COLUNA_SAIDA = 3;
    private final DateTimeFormatter formatador = Disponibilidade.DATA_FORMATADOR;
    
    public DisponibilidadeParaReservarPanel() {
        initComponents();
        adicionarNaTabelaDiasDoMes();
    }
    
    public DisponibilidadeParaReservarPanel(List<Disponibilidade> disponibilidades) {
        initComponents();
        adicionarNaTabelaDiasDoMes();
        disponibilidades.forEach( dsp -> {
            this.disponibilidades.put(dsp.getDataFormatada(), dsp);
        });
    }
    
    public LocalDate getDataEntrada(){
        return this.dataEntrada;
    }
    
    public LocalDate getDataSaida(){
        return this.dataSaida;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        disponibilidadeTable = new javax.swing.JTable();
        marcarEntradaButton = new javax.swing.JButton();
        mesChooser = new com.toedter.calendar.JMonthChooser();
        mesLabel = new javax.swing.JLabel();
        desmarcarButton = new javax.swing.JButton();
        limparDatasButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(163, 187, 229));

        disponibilidadeTable.setFont(new java.awt.Font("JetBrainsMono NF", 0, 12)); // NOI18N
        disponibilidadeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Status", "Entrada", "Saída"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        disponibilidadeTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(disponibilidadeTable);

        marcarEntradaButton.setFont(new java.awt.Font("JetBrainsMono NF", 0, 12)); // NOI18N
        marcarEntradaButton.setText("Marcar entrada");
        marcarEntradaButton.setToolTipText("");
        marcarEntradaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marcarEntradaButtonActionPerformed(evt);
            }
        });

        mesChooser.setFont(new java.awt.Font("JetBrainsMono NF", 0, 12)); // NOI18N
        mesChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                mesChooserPropertyChange(evt);
            }
        });

        mesLabel.setFont(new java.awt.Font("JetBrainsMono NF", 0, 12)); // NOI18N
        mesLabel.setLabelFor(mesChooser);
        mesLabel.setText("Selecionar mês:");

        desmarcarButton.setFont(new java.awt.Font("JetBrainsMono NF", 0, 12)); // NOI18N
        desmarcarButton.setText("Marcar saída");
        desmarcarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desmarcarButtonActionPerformed(evt);
            }
        });

        limparDatasButton.setFont(new java.awt.Font("JetBrainsMono NF", 0, 12)); // NOI18N
        limparDatasButton.setText("Limpar datas");
        limparDatasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limparDatasButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(limparDatasButton)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mesChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(marcarEntradaButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(desmarcarButton)))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mesChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(desmarcarButton)
                    .addComponent(marcarEntradaButton))
                .addGap(18, 18, 18)
                .addComponent(limparDatasButton)
                .addGap(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void marcarEntradaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marcarEntradaButtonActionPerformed
        // TODO add your handling code here:
        marcarDataEntrada();
    }//GEN-LAST:event_marcarEntradaButtonActionPerformed

    private void desmarcarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desmarcarButtonActionPerformed
        // TODO add your handling code here:
        marcarDataSaida();
    }//GEN-LAST:event_desmarcarButtonActionPerformed

    private void mesChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_mesChooserPropertyChange
        // TODO add your handling code here:
        modificarMesTabela();
    }//GEN-LAST:event_mesChooserPropertyChange

    private void limparDatasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limparDatasButtonActionPerformed
        // TODO add your handling code here:
        limparDatas();
    }//GEN-LAST:event_limparDatasButtonActionPerformed

    private void modificarMesTabela(){
        DefaultTableModel modelo = (DefaultTableModel)disponibilidadeTable.getModel();
        modelo.setRowCount(0);
        
        int mes = mesChooser.getMonth() + 1;
        
        YearMonth mesAtual = YearMonth.of(LocalDate.now().getYear(), mes);
        int quantidadeDias = mesAtual.lengthOfMonth();
        
        for(int i = 1; i <= quantidadeDias; i++){
            
            LocalDate data = mesAtual.atDay(i);
            
            String dataFormatada = data.format(formatador);
            StatusDisponibilidade status = StatusDisponibilidade.INDISPONIVEL;
            
            if (disponibilidades.containsKey(dataFormatada)){
                Disponibilidade disponibilidade = disponibilidades.get(dataFormatada);
                dataFormatada = disponibilidade.getDataFormatada();
                status = disponibilidade.getStatus();
            }
            
            if (!dataEntrada.equals(LocalDate.MIN) && dataEntrada.equals(data))
                modelo.addRow(new Object[]{dataFormatada, status.name(), true, false});
            else if (!dataSaida.equals(LocalDate.MIN) && dataSaida.equals(data))
                modelo.addRow(new Object[]{dataFormatada, status.name(), false, true});
            else
                modelo.addRow(new Object[]{dataFormatada, status.name(), false, false});
        }
    }
    
    private void adicionarNaTabelaDiasDoMes(){
        YearMonth mesAtual = YearMonth.now();
        int quantidadeDias = mesAtual.lengthOfMonth();
        DefaultTableModel modelo = (DefaultTableModel)disponibilidadeTable.getModel();
        for(int i = 1; i <= quantidadeDias; i++){
            LocalDate data = mesAtual.atDay(i);
            String dataFormatada = data.format(formatador);
            
            if (disponibilidades.containsKey(dataFormatada)){
                Disponibilidade disponibilidade = disponibilidades.get(dataFormatada);
                modelo.addRow(new Object[]{disponibilidade.getDataFormatada(), disponibilidade.getStatus().name(), false, false});
            }
            else
                modelo.addRow(new Object[]{data.format(formatador), StatusDisponibilidade.INDISPONIVEL.name(), false, false});
        }
    }
    
    private void marcarDataEntrada(){
        DefaultTableModel modelo = (DefaultTableModel)disponibilidadeTable.getModel();
        int linha = disponibilidadeTable.getSelectedRow();
        
        if(linha != -1)
        {
            String dataFormatada = (String)modelo.getValueAt(linha, COLUNA_DATA);
            LocalDate data = LocalDate.parse(dataFormatada, formatador);
            
            if (data.isBefore(dataSaida) || dataSaida.equals(LocalDate.MIN)){
                
                if(dataEntradaLinha != -1)
                    modelo.setValueAt(false, dataEntradaLinha, COLUNA_ENTRADA);

                modelo.setValueAt(true, linha, COLUNA_ENTRADA);
                dataEntrada = data;
                dataEntradaLinha = linha;
            }
            else
                JOptionPane.showMessageDialog(null, "A data de entrada não pode ser no mesmo dia ou depois da data de saída");
        }
        else
            JOptionPane.showMessageDialog(null, "É necessário selecionar uma data");
    }
    
    private void marcarDataSaida(){
        DefaultTableModel modelo = (DefaultTableModel)disponibilidadeTable.getModel();
        int linha = disponibilidadeTable.getSelectedRow();
        
        if(linha != -1)
        {
            String dataFormatada = (String)modelo.getValueAt(linha, COLUNA_DATA);
            LocalDate data = LocalDate.parse(dataFormatada, formatador);

            if (data.isAfter(dataEntrada) || dataEntrada.equals(LocalDate.MIN)){
                
                if(dataSaidaLinha != -1)
                    modelo.setValueAt(false, dataSaidaLinha, COLUNA_SAIDA);

                modelo.setValueAt(true, linha, COLUNA_SAIDA);
                dataSaida = data;
                dataSaidaLinha = linha;
            }
            else
                JOptionPane.showMessageDialog(null, "A data de saída não pode ser no mesmo dia ou antes da data de entrada");
        }
        else
            JOptionPane.showMessageDialog(null, "É necessário selecionar uma data");
    }
    
    private void limparDatas(){
        if (dataEntradaLinha == -1 && dataSaidaLinha == -1)
            return;
        
        DefaultTableModel modelo = (DefaultTableModel)disponibilidadeTable.getModel();
        if (dataEntradaLinha != -1)
            modelo.setValueAt(false, dataEntradaLinha, COLUNA_ENTRADA);
        
        if (dataSaidaLinha != -1)
            modelo.setValueAt(false, dataSaidaLinha, COLUNA_SAIDA);
        
        dataEntrada = LocalDate.MIN;
        dataSaida = LocalDate.MIN;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton desmarcarButton;
    private javax.swing.JTable disponibilidadeTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton limparDatasButton;
    private javax.swing.JButton marcarEntradaButton;
    private com.toedter.calendar.JMonthChooser mesChooser;
    private javax.swing.JLabel mesLabel;
    // End of variables declaration//GEN-END:variables
}
